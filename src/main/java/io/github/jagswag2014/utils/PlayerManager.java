/*
 * This file is part of Jssentials. Jssentials is free software:
 * you can redistribute it or modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version. Jssentials is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along
 * with Jssentials. If not, see <http://www.gnu.org/licenses/>.
 */

package io.github.jagswag2014.utils;

import io.github.jagswag2014.Jssentials;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class PlayerManager {

    private Jssentials plugin;
    private int id;
    private Player player;
    private List<String> homes;
    private String lastLocation;
    private UUID lastReply;
    private List<UUID> ignores;
    private boolean receiveMsg;
    private boolean receiveTp;
    private boolean muted;
    private long mutedExpiration;
    private boolean frozen;
    private boolean banned;
    private long bannedExpiration;

    /**
     * Creates a new PlayerManager if it is a new player (not in the database)
     *
     * @param plugin main plugin class instance
     * @param id     player's unique server ID
     * @param player player
     */
    public PlayerManager(Jssentials plugin, int id, Player player) {
        this.plugin = plugin;
        this.id = id;
        this.player = player;
        homes = new ArrayList<>();
        lastLocation = setLastLocation(player);
        lastReply = null;
        ignores = new ArrayList<>();
        receiveMsg = true;
        receiveTp = true;
        muted = false;
        mutedExpiration = 0;
        frozen = false;
        banned = false;
        bannedExpiration = 0;
        plugin.playerManagerHashMap.put(player, this);
    }

    /**
     * Creates a new PlayerManager if a player's info is already in the database
     *
     * @param plugin           main plugin class instance
     * @param id               player's unique server ID
     * @param player           player
     * @param homes            list of a players set homes
     * @param lastLocation     the player's last location prior to teleporting (for /back)
     * @param lastReply        the player who last messaged this player
     * @param ignores          list of players this player is ignoring
     * @param receiveMsg       states whether the player can openly receive messages
     * @param receiveTp        states whether the player can openly receive teleports
     * @param muted            states whether the player is muted
     * @param mutedExpiration  if muted and not permanent, the expiration (in millis) the mute expires
     * @param frozen           states whether the player is frozen
     * @param banned           states whether the player is banned
     * @param bannedExpiration if banned and not permanent, the expiration (in millis) the ban expires
     */
    public PlayerManager(Jssentials plugin, int id, Player player, List<String> homes, String lastLocation, UUID lastReply, List<UUID> ignores,
                         boolean receiveMsg, boolean receiveTp, boolean muted, long mutedExpiration, boolean frozen, boolean banned, long bannedExpiration) {
        this.plugin = plugin;
        this.id = id;
        this.player = player;
        this.homes = homes;
        this.lastLocation = lastLocation;
        this.lastReply = lastReply;
        this.ignores = ignores;
        this.receiveMsg = receiveMsg;
        this.receiveTp = receiveTp;
        this.muted = muted;
        this.mutedExpiration = mutedExpiration;
        this.frozen = frozen;
        this.banned = banned;
        this.bannedExpiration = bannedExpiration;
        plugin.playerManagerHashMap.put(player, this);
    }

    private String setLastLocation(Player player) {
        return player.getLocation().getWorld().getName() + ":"
                + player.getLocation().getBlockX() + ":"
                + player.getLocation().getBlockY() + ":"
                + player.getLocation().getBlockZ() + ":"
                + player.getLocation().getYaw() + ":"
                + player.getLocation().getPitch();
    }

    /**
     * Returns the unique ID (generated by the plugin) of the player
     *
     * @return player's unique server ID
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the player
     *
     * @return player
     */
    public Player getPlayer() {
        return player;
    }

    /**
     * Returns the last location of the player after teleporting
     *
     * @return last location
     */
    public String getLastLocation() {
        return lastLocation;
    }

    /**
     * Returns the last player who messaged this player
     *
     * @return last messaging player or null if none
     */
    public UUID getLastReply() {
        return lastReply;
    }

    /**
     * Returns all the homes the player has
     *
     * @return homes
     */
    public List<String> getHomes() {
        return homes;
    }

    /**
     * Adds a home to their home list
     *
     * @param newHome home to add
     */
    public void addHome(String newHome) {
        getHomes().add(newHome);
    }

    /**
     * Removes a home from their home list
     *
     * @param oldHome home to remove
     */
    public void removeHome(String oldHome) {
        getHomes().remove(oldHome);
    }

    /**
     * Returns a list of all players this player is ignoring
     *
     * @return ignored players
     */
    public List<UUID> getIgnores() {
        return ignores;
    }

    /**
     * Adds a player to their list of ignores
     *
     * @param newIgnore player UUID to ignore
     */
    public void addIgnore(UUID newIgnore) {
        getIgnores().add(newIgnore);
    }

    /**
     * Removes a player from their ignore list
     *
     * @param oldIgnore player uuid to unignore
     */
    public void removeIgnore(UUID oldIgnore) {
        getIgnores().remove(oldIgnore);
    }

    /**
     * Returns whether a player can receive messages from other players
     *
     * @return message toggled
     */
    public boolean isReceiveMsg() {
        return receiveMsg;
    }

    /**
     * Sets whether the player can receive messages
     *
     * @param receiveMsg true to receive messages, false otherwise
     */
    public void setReceiveMsg(boolean receiveMsg) {
        this.receiveMsg = receiveMsg;
    }

    /**
     * Returns whether the player can receive TP requests
     *
     * @return teleport toggled
     */
    public boolean isReceiveTp() {
        return receiveTp;
    }

    /**
     * Sets whether the player can receive teleport requests
     *
     * @param receiveTp true to receive teleports, false otherwise
     */
    public void setReceiveTp(boolean receiveTp) {
        this.receiveTp = receiveTp;
    }

    /**
     * Returns whether the player is muted
     *
     * @return true if muted, false otherwise
     */
    public boolean isMuted() {
        return muted;
    }

    /**
     * Sets whether the player is muted
     *
     * @param muted true to set muted, false otherwise
     */
    public void setMuted(boolean muted) {
        this.muted = muted;
    }

    /**
     * Returns (if temporary) the expiration (in millis) the mute expires
     *
     * @return mute expiration
     */
    public long getMutedExpiration() {
        return mutedExpiration;
    }

    /**
     * Sets the mute expiration (must be used in conjuction with {@link #setMuted(boolean)})
     *
     * @param mutedExpiration
     */
    public void setMutedExpiration(long mutedExpiration) {
        this.mutedExpiration = mutedExpiration;
    }

    /**
     * Returns whether the player is frozen
     *
     * @return true if frozen, false otherwise
     */
    public boolean isFrozen() {
        return frozen;
    }

    /**
     * Sets whether the player is frozen
     *
     * @param frozen true to freeze, false otherwise
     */
    public void setFrozen(boolean frozen) {
        this.frozen = frozen;
    }

    /**
     * Returns whether the player is banned
     *
     * @return true if banned, false otherwise
     */
    public boolean isBanned() {
        return banned;
    }

    /**
     * Sets whether the player is banned
     *
     * @param banned true to ban, false otherwise
     */
    public void setBanned(boolean banned) {
        this.banned = banned;
    }

    /**
     * Returns (if temporary) the expiration (in millis) the ban expires
     *
     * @return ban expiration
     */
    public long getBannedExpiration() {
        return bannedExpiration;
    }

    /**
     * Sets the expiration of the ban (must be used in conjuction with {@link #setBanned(boolean)})
     *
     * @param bannedExpiration
     */
    public void setBannedExpiration(long bannedExpiration) {
        this.bannedExpiration = bannedExpiration;
    }
}
